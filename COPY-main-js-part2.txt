                    const counter = entry.target;
                    animateCounter(counter);
                    counterObserver.unobserve(counter);
                }
            });
        });

        counters.forEach(counter => {
            counterObserver.observe(counter);
        });
    }

    // Intersection Observer でアニメーション
    setupIntersectionObserver() {
        const animatedElements = document.querySelectorAll('.feature-card, .pricing-card, .command-card, .support-card, .step');
        
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('fade-in-up');
                    observer.unobserve(entry.target);
                }
            });
        }, {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        });

        animatedElements.forEach(element => {
            observer.observe(element);
        });
    }

    // スムーススクロール
    setupSmoothScroll() {
        const links = document.querySelectorAll('a[href^="#"]');
        
        links.forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                
                const targetId = link.getAttribute('href').substring(1);
                const targetElement = document.getElementById(targetId);
                
                if (targetElement) {
                    const headerHeight = document.querySelector('.header').offsetHeight;
                    const targetPosition = targetElement.offsetTop - headerHeight;
                    
                    window.scrollTo({
                        top: targetPosition,
                        behavior: 'smooth'
                    });
                }
            });
        });
    }

    // モバイルメニュー
    setupMobileMenu() {
        const navToggle = document.getElementById('nav-toggle');
        const navMenu = document.querySelector('.nav-menu');
        
        if (navToggle && navMenu) {
            navToggle.addEventListener('click', () => {
                navToggle.classList.toggle('active');
                navMenu.classList.toggle('active');
            });

            // メニューリンククリック時にメニューを閉じる
            const navLinks = document.querySelectorAll('.nav-link');
            navLinks.forEach(link => {
                link.addEventListener('click', () => {
                    navToggle.classList.remove('active');
                    navMenu.classList.remove('active');
                });
            });
        }
    }

    // Bot ステータス関連
    setupBotStatus() {
        console.log('🤖 Setting up bot status...');
        this.updateMultipleBotStatus();
        
        // 1分ごとにBotステータスを更新
        setInterval(() => {
            this.updateMultipleBotStatus();
        }, 60000);
    }

    async updateMultipleBotStatus() {
        try {
            // 開発環境とproduction環境でAPIエンドポイントを切り替え
            const apiBaseUrl = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1'
                ? 'http://localhost:3001'  // 開発環境
                : 'https://aivis-chan-bot.com';  // 本番環境（プロキシ経由）
                
            const response = await fetch(`${apiBaseUrl}/api/bot-stats`);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const allStatsData = await response.json();
            console.log('📊 Bot stats received:', allStatsData);
            
            this.updateBotDetailPage(allStatsData.bots);
            
        } catch (error) {
            console.error('❌ Error fetching bot status:', error);
        }
    }

    updateBotDetailPage(botStatuses) {
        console.log('updateBotDetailPage called with:', botStatuses);
    }

    generateSpecificInviteLink(botId) {
        return `https://discord.com/api/oauth2/authorize?client_id=${botId}&permissions=3145728&scope=bot`;
    }

    // ヒーロー統計情報の設定と更新
    async setupHeroStats() {
        console.log('🔢 Setting up hero statistics...');
        await this.updateHeroStats();
        
        // 5分ごとに統計情報を更新
        setInterval(() => {
            this.updateHeroStats();
        }, 5 * 60 * 1000);
    }

    // 全Bot統計情報を取得してヒーロー部分を更新
    async updateHeroStats() {
        try {
            // 開発環境とproduction環境でAPIエンドポイントを切り替え
            const apiBaseUrl = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1'
                ? 'http://localhost:3001'  // 開発環境
                : 'https://aivis-chan-bot.com';  // 本番環境（プロキシ経由）
                
            const response = await fetch(`${apiBaseUrl}/api/bot-stats`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const allStatsData = await response.json();
            console.log('📊 All bot stats received:', allStatsData);

            // 全Botの合計統計を計算
            const totals = {
                servers: 0,
                users: 0,
                uptime: 0,
                onlineBots: 0
            };

            allStatsData.bots.forEach(bot => {
                if (bot.success && bot.online) {
                    totals.servers += bot.server_count || 0;
                    totals.users += bot.user_count || 0;
                    totals.onlineBots++;
                }
            });

            // 平均稼働率を計算
            if (totals.onlineBots > 0) {
                const uptimeSum = allStatsData.bots
                    .filter(bot => bot.success && bot.online)
                    .reduce((sum, bot) => sum + (bot.uptime || 0), 0);
                totals.uptime = uptimeSum / totals.onlineBots;
            }

            // ヒーロー統計をアニメーション付きで更新
            this.animateHeroStat('total-servers', totals.servers);
            this.animateHeroStat('total-users', totals.users);
            this.animateHeroStat('total-uptime', totals.uptime.toFixed(1));

        } catch (error) {
            console.error('❌ Error fetching hero stats:', error);
            
            // エラー時の表示
            document.getElementById('total-servers').textContent = 'API エラー';
            document.getElementById('total-users').textContent = 'API エラー';
            document.getElementById('total-uptime').textContent = 'API エラー';
        }
    }

    // 統計数値をアニメーション付きで更新
    animateHeroStat(elementId, targetValue) {
        const element = document.getElementById(elementId);
        if (!element) return;

        const startValue = 0;
        const duration = 2000; // 2秒
        const startTime = Date.now();

        const animate = () => {
            const elapsed = Date.now() - startTime;
            const progress = Math.min(elapsed / duration, 1);
            
            // easeOutQuart イージング関数
            const easedProgress = 1 - Math.pow(1 - progress, 4);
            
            const currentValue = Math.floor(startValue + (targetValue - startValue) * easedProgress);
            
            if (elementId === 'total-uptime') {
                element.textContent = (startValue + (targetValue - startValue) * easedProgress).toFixed(1);
            } else {
                element.textContent = currentValue.toLocaleString();
            }

            if (progress < 1) {
                requestAnimationFrame(animate);
            }
        };

        animate();
    }
}

// ページ読み込み完了後に初期化
document.addEventListener('DOMContentLoaded', () => {
    const website = new AivisWebsite();
});

export default AivisWebsite;
